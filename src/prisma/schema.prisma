// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  firstName        String?
  lastName         String?
  parentName       String
  dob              DateTime?
  gender           String?
  passwordHash     String
  admin            Boolean          @default(false)
  profilePicture   String?
  stripeId         String?
  stripeSubId      String?
  active           Boolean          @default(false)
  subEnds          DateTime?
  score            Float?
  date             DateTime         @default(now())
  dateSub          DateTime?
  gradedExams      GradedExam[]
  examSession      ExamSession?
  gradedCategories GradedCategory[]
}

model Exam {
  id           String        @id @default(uuid())
  num          Int           @unique
  date         DateTime      @default(now())
  problems     Problem[]
  gradedExams  GradedExam[]
  examSessions ExamSession[]
}

model Problem {
  id         String     @id @default(uuid())
  question   String
  multi      Boolean    @default(false)
  correct    String
  options    String[]
  unit       String?
  num        Int
  img        String?
  date       DateTime   @default(now())
  exam       Exam       @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId     String
  categories Category[]
}

model GradedExam {
  id             String          @id @default(uuid())
  marks          Int
  total          Int
  percent        Float
  num            Int
  firstAttempt   Boolean
  time           Int
  date           DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  exam           Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         String
  gradedProblems GradedProblem[]
}

model GradedProblem {
  id           String     @id @default(uuid())
  question     String
  correct      String
  selected     String?
  num          Int
  multi        Boolean    @default(false)
  img          String?
  options      String[]
  unit         String?
  date         DateTime   @default(now())
  gradedExam   GradedExam @relation(fields: [gradedExamId], references: [id], onDelete: Cascade)
  gradedExamId String
  categories   Category[]
}

model ExamSession {
  id     String   @id @default(uuid())
  start  DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @unique
  Exam   Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId String?
}

model GradedCategory {
  id       String   @id @default(uuid())
  correct  Int      @default(0)
  attempts Int      @default(0)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  category Category

  @@unique([userId, category])
}

enum Category {
  NUMBERS
  ADDITION_SUBTRACTION
  MULTIPLICATION_DIVISION
  FRACTIONS
  MEASUREMENT
  GEOMETRY
  STATISTICS
  RATIO_PROPORTION
  ALGEBRA
}
